'use strict';

// This function generated by Babelifying ES6 code
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var request = require('request');
var jwt = require('jsonwebtoken');
var User = require('../model/users');

if (!process.env.FB_SECRET) {
  var FB_SECRET = require('../fb').FB_SECRET;
} else {
  var FB_SECRET = process.env.FB_SECRET;
}

module.exports = {
   facebookAuthentication: facebookAuthentication,
   createOrRetrieveUser: createOrRetrieveUser
};

/**
* Facebook authentication using graph api,
* Here we will receive our code from the ionic app and pass it to the graph api
* After auth code will be exchanged for accessToken we will fetch profile info
* @param options
* @param cb
*/
function facebookAuthentication(options, cb) {
   var fields = ['id', 'email', 'first_name', 'last_name', 'link', 'name'];
   var accessTokenUrl = 'https://graph.facebook.com/v2.5/oauth/access_token';
   var graphApiUrl = 'https://graph.facebook.com/v2.5/me?fields=' + fields.join(',');

   var params = {
       code: options.code,
       client_id: options.clientId,
       redirect_uri: options.redirectUri,
       client_secret: FB_SECRET
   };

   // Step 1. Exchange authorization code for access token.
   request.get({ url: accessTokenUrl, qs: params, json: true }, function (err, response, accessToken) {
       if (response.statusCode !== 200) return cb(accessToken.error.message);

       // Step 2. Retrieve profile information about the current user.
       request.get({ url: graphApiUrl, qs: accessToken, json: true }, function (err, response, profile) {
           if (response.statusCode !== 200) return cb(accessToken.error.message);

           // Here we will normalize facebook response to our user schema
           // So later we can use multiple providers
           var user = {
               profilePicture: 'https://graph.facebook.com/' + profile.id + '/picture?type=large',
               firstName: profile.first_name,
               lastName: profile.last_name,
               profiles: {
                   facebook: profile.id
               },
               email: profile.email,
               token: accessToken
           };

           cb(null, { type: 'facebook', user: user });
       });
   });
}

/**
* This method is responsible for fetching the user object,
* if no user is found with specified credentials, new user will be created
* @param options
* @param cb
*/
function createOrRetrieveUser(options, cb) {
   // select the query object based on the auth type
   var query = _defineProperty({}, 'profiles.' + options.type, options.user.profiles[options.type]);
   // User in our database
   User.findOne(query, function (err, user) {
       if (err) return cb('Error fetching user');

       // User found, return him to the callback
       if (user) return cb(null, user);

       // No user is found, create new user
       createUser(options.user, cb);
   });
}

/**
* Saves new user with data passed from profiles
* @param user
* @param cb
*/
function createUser(user, cb) {
   var newUser = new User(user);

   newUser.save(cb);
}